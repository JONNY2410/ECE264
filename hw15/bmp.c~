#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdlib.h>
#include"bmp.h"
char* _error_handle(char* message_error){
	char* error = malloc((strlen(message_error)+1)*sizeof(*message_error));
	strcpy(error,message_error);
	return error;
}

void debug(BMPImage* image,long int size_file){
	FILE* fp_test = fopen("debug","w");
	fwrite(&(image->header),BMP_HEADER_SIZE,1,fp_test);
	fwrite(image->data,1,size_file - BMP_HEADER_SIZE,fp_test);
	fclose(fp_test);
}

BMPImage* read_bmp(FILE* fp, char** error){		//read data is not success
	fseek(fp,0, SEEK_END);
	long int size_file = ftell(fp);
	fseek(fp, 0, SEEK_SET);
	BMPImage *image = malloc(sizeof(*image));
	if(image==NULL){
		char* message_error = "malloc failure";
		*error = _error_handle(message_error);
		return NULL;
	}
	long int check1 = fread(&(image->header),BMP_HEADER_SIZE,1,fp);	
	check1 = 2;	
	bool headcheck = check_bmp_header(&(image->header),fp);
	if((headcheck == false) || (check1!=1)){
		char* message_error = "invalid header";
		*error = _error_handle(message_error);
		free(image);
		return NULL;
	}	
	unsigned char* data = malloc(image->header.image_size_bytes);
	if(data==NULL){
		char* message_error = "malloc failure";
		*error = _error_handle(message_error);
		free(image);
		return NULL;
	}

	long int check2 = fread(data,sizeof(*data),size_file - BMP_HEADER_SIZE,fp);
	if(check2!=(size_file - BMP_HEADER_SIZE)){
		char* message_error = "fread failure";
		*error = _error_handle(message_error);
		free_bmp(image);
		return NULL;
	}
	image->data = data;
	return image;
}

bool check_bmp_header(BMPHeader* bmp_hdr, FILE* fp){
	fseek(fp,0,SEEK_END);
	long int size = ftell(fp); 
	fseek(fp,BMP_HEADER_SIZE,SEEK_SET);	 
	if(bmp_hdr->type != 0x4d42){
		return false;	 
	}		
	if(bmp_hdr->offset != BMP_HEADER_SIZE){
		return false;
	}
	if(bmp_hdr->dib_header_size != DIB_HEADER_SIZE){
		return false;
	}
	if(bmp_hdr->num_planes != 1){
		return false;
	}
	if(bmp_hdr->compression != 0){
		return false;
	}
	if((bmp_hdr->num_colors!=0)||(bmp_hdr->important_colors!=0)){
		return false;
	}
	if(bmp_hdr->bits_per_pixel!=24){
		return false;
	}
	if(bmp_hdr->size != size){		//size of file
		return false;
	}
	long int wid = (bmp_hdr->bits_per_pixel) * (bmp_hdr->width_px)/8;
	if((wid%4) != 0){
		wid = wid+(4-(wid%4));
	}
	if((wid*(bmp_hdr->height_px)!= bmp_hdr->image_size_bytes)||(size - BMP_HEADER_SIZE != bmp_hdr->image_size_bytes)){
		return false;
	}			
	return true;
}

void free_bmp(BMPImage* image){
	free(image->data);
	free(image);
}

bool write_bmp(FILE* fp, BMPImage* image, char** error){
	fseek(fp,0,SEEK_SET);
	long int check1 = fwrite(&(image->header),BMP_HEADER_SIZE,1,fp);	
	if(check1 != 1){
//		_error_handle(error);
		return false;
	}
	long int check2 = fwrite((image->data),1,(image->header.size) - BMP_HEADER_SIZE,fp);	
	if(check2 != (image->header.size - BMP_HEADER_SIZE)){
//		_error_handle(error);
		return false;
	}
	return true;
}
/*
BMPImage* crop_bmp(BMPImage* image, int x, int y, int w, int h, char** error){

	long int width_in_byte = w*(image->header.bits_per_pixel)/8;
	int new_padding = 0;
	if(width_in_byte % 4 != 0){
		new_padding = 4 - (width_in_byte%4);
		width_in_byte = width_in_byte + new_padding;		//width in byte of the new bmp with padding
	}
	printf("padding: %d",new_padding);
	printf("width_in_byte: %ld", width_in_byte);

	long int row_size = (image->header.width_px)*(image->header.bits_per_pixel)/8;		//width in byte of the original bmp with padding
	int padding = 4 - (row_size%4);	
	if((row_size%4)!=0){
		row_size = row_size + padding;
	}
	printf("old row_size: %ld\n ",row_size);	
	unsigned char adda = 0;
	unsigned char addb = 0;
	unsigned char* trash = &adda ;			//useless data
	unsigned char* useful = &addb;			//croped data

	
	for(int row = 0; row < (image->header.height_px);row++){
		if((row < (image->header.height_px - y))&&(row >= (image->header.height_px - y - h))){
			for(int col = 0; col < (image->header.width_px); col++){
				if((col >= x)&&(col <= x+w-1)){
					useful = malloc(sizeof(*trash)*width_in_byte);
					fread(useful,sizeof(unsigned char),3,ftp);
					fwrite(useful,sizeof(unsigned char),3,fpu);
					free(useful);
				}
				else{	
					trash = malloc(sizeof(*trash)*row_size);
					fread(trash,sizeof(unsigned char),3,ftp);
					fwrite(trash,sizeof(unsigned char),3,fptra);
					free(trash);
				}
			}
			trash = malloc(sizeof(*trash)*row_size);
			fread(trash,sizeof(unsigned char),padding,ftp);
			fwrite(trash,sizeof(unsigned char),padding,fptra);
			free(trash);
			for(int j=0; j<new_padding; j++){
				fputc(0x00,fpu);
			}	
		}
		else{
			trash = malloc(sizeof(*trash)*row_size);
			fread(trash,row_size,1,ftp);
			fwrite(trash,row_size,1,fptra);
			free(trash);
		}
	}
	return crop_image;	
}
*/
